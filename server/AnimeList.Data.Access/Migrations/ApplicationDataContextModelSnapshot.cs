// <auto-generated />
using System;
using AnimeList.Data.Access;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AnimeList.Data.Access.Migrations
{
    [DbContext(typeof(ApplicationDataContext))]
    partial class ApplicationDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AnimeList.Data.Entities.AnimeSeries.Anime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Anime");
                });

            modelBuilder.Entity("AnimeList.Data.Entities.AnimeSeries.AnimeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AnimeType");
                });

            modelBuilder.Entity("AnimeList.Data.Entities.AnimeSeries.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SeasonsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SeasonsId");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("AnimeList.Data.Entities.AnimeSeries.Premired", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("SeasonalTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Premired");
                });

            modelBuilder.Entity("AnimeList.Data.Entities.AnimeSeries.Seasons", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AnimeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Popularity")
                        .HasColumnType("int");

                    b.Property<Guid>("PremiredId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Ranked")
                        .HasColumnType("int");

                    b.Property<int>("RelatedAnime")
                        .HasColumnType("int");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<Guid>("SeriesTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.HasIndex("PremiredId");

                    b.HasIndex("SeriesTypeId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("AnimeList.Data.Entities.Auth.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailCount")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailConfirmed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7bb59196-88d2-4611-b1a3-9aaec767d0a0"),
                            AccessFailCount = 0,
                            Email = "admin@gmail.com",
                            EmailConfirmed = "admin@gmail.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            PasswordHash = "3A6955ECB2BE2FDE0BCE611575A9BF4DABA76FB528545C74CB0A9A00C7286F92784E03051C83861F0ABD1B9EA3AA6290A86E6B34E82FFD0F256DE4086575BD47",
                            Role = 0,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("115a1abc-74df-4770-9a58-245c71313b6a"),
                            AccessFailCount = 0,
                            Email = "user@gmail.com",
                            EmailConfirmed = "user@gmail.com",
                            FirstName = "User",
                            LastName = "User",
                            LockoutEnabled = false,
                            PasswordHash = "79655CA3D52A3DBD076E5668561A28DE45BA834B3F2F6D591CB23424F31FEC18318E57822A69769911261EEDA083697E9B0CEBD9DEBF73C6742A8AD1E3130BC6",
                            Role = 1,
                            UserName = "User"
                        },
                        new
                        {
                            Id = new Guid("f5165b28-ce08-4527-a477-3f230402f467"),
                            AccessFailCount = 0,
                            Email = "guest@gmail.com",
                            EmailConfirmed = "guest@gmail.com",
                            FirstName = "Guest",
                            LastName = "Guest",
                            LockoutEnabled = false,
                            PasswordHash = "9BD5E0FF0FC707C385129109707B29EAB725246D032E589E37FC14CEC24B48D7F2B5DE2193D239253C9294EE8E77E1B3D4B6EBEA81BBE50EC454A3D470DDA0B4",
                            Role = 2,
                            UserName = "Guest"
                        });
                });

            modelBuilder.Entity("AnimeList.Data.Entities.AnimeSeries.Genre", b =>
                {
                    b.HasOne("AnimeList.Data.Entities.AnimeSeries.Seasons", null)
                        .WithMany("Genre")
                        .HasForeignKey("SeasonsId");
                });

            modelBuilder.Entity("AnimeList.Data.Entities.AnimeSeries.Seasons", b =>
                {
                    b.HasOne("AnimeList.Data.Entities.AnimeSeries.Anime", null)
                        .WithMany("AnimeTitles")
                        .HasForeignKey("AnimeId");

                    b.HasOne("AnimeList.Data.Entities.AnimeSeries.Premired", "Premired")
                        .WithMany()
                        .HasForeignKey("PremiredId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimeList.Data.Entities.AnimeSeries.AnimeType", "SeriesType")
                        .WithMany()
                        .HasForeignKey("SeriesTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Premired");

                    b.Navigation("SeriesType");
                });

            modelBuilder.Entity("AnimeList.Data.Entities.AnimeSeries.Anime", b =>
                {
                    b.Navigation("AnimeTitles");
                });

            modelBuilder.Entity("AnimeList.Data.Entities.AnimeSeries.Seasons", b =>
                {
                    b.Navigation("Genre");
                });
#pragma warning restore 612, 618
        }
    }
}
