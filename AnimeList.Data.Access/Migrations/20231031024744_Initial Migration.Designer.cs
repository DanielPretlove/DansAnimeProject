// <auto-generated />
using System;
using AnimeList.Data.Access;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AnimeList.Data.Access.Migrations
{
    [DbContext(typeof(ApplicationDataContext))]
    [Migration("20231031024744_Initial Migration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AnimeList.Data.Entities.AnimeSeries.Anime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Anime");
                });

            modelBuilder.Entity("AnimeList.Data.Entities.AnimeSeries.AnimeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AnimeType");
                });

            modelBuilder.Entity("AnimeList.Data.Entities.AnimeSeries.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SeasonsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeasonsId");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("AnimeList.Data.Entities.AnimeSeries.Premired", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("SeasonalTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Premired");
                });

            modelBuilder.Entity("AnimeList.Data.Entities.AnimeSeries.Seasons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnimeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Popularity")
                        .HasColumnType("int");

                    b.Property<int>("PremiredId")
                        .HasColumnType("int");

                    b.Property<int>("Ranked")
                        .HasColumnType("int");

                    b.Property<int>("RelatedAnime")
                        .HasColumnType("int");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<int>("SeriesTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.HasIndex("PremiredId");

                    b.HasIndex("SeriesTypeId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("AnimeList.Data.Entities.AnimeSeries.Genre", b =>
                {
                    b.HasOne("AnimeList.Data.Entities.AnimeSeries.Seasons", null)
                        .WithMany("Genre")
                        .HasForeignKey("SeasonsId");
                });

            modelBuilder.Entity("AnimeList.Data.Entities.AnimeSeries.Seasons", b =>
                {
                    b.HasOne("AnimeList.Data.Entities.AnimeSeries.Anime", null)
                        .WithMany("AnimeTitles")
                        .HasForeignKey("AnimeId");

                    b.HasOne("AnimeList.Data.Entities.AnimeSeries.Premired", "Premired")
                        .WithMany()
                        .HasForeignKey("PremiredId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimeList.Data.Entities.AnimeSeries.AnimeType", "SeriesType")
                        .WithMany()
                        .HasForeignKey("SeriesTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Premired");

                    b.Navigation("SeriesType");
                });

            modelBuilder.Entity("AnimeList.Data.Entities.AnimeSeries.Anime", b =>
                {
                    b.Navigation("AnimeTitles");
                });

            modelBuilder.Entity("AnimeList.Data.Entities.AnimeSeries.Seasons", b =>
                {
                    b.Navigation("Genre");
                });
#pragma warning restore 612, 618
        }
    }
}
